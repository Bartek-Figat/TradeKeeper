name: Build and Push Docker Image

on:
  push:
    branches:
      - main # Change this to your default branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: your-dockerhub-username/your-image-name:latest

      - name: Log out from Docker Hub
        run: docker logout
# Step 3: Set Up Docker Hub Credentials
# 1. Create a Docker Hub Access Token:
# Log in to Docker Hub.
# Go to Account Settings > Security.
# Create a new access token.
# 2. Add Secrets to GitHub:
# Go to your GitHub repository.
# Navigate to Settings > Secrets and variables > Actions.
# Add the following secrets:
# DOCKER_HUB_USERNAME: Your Docker Hub username.
# DOCKER_HUB_ACCESS_TOKEN: The access token you created.
# Explanation
# Triggers: The workflow triggers on a push to the main branch. You can adjust this to fit your branching strategy.
# Checkout: Uses the actions/checkout action to clone the repository.
# Docker Buildx: Sets up Docker Buildx, which is required for the docker/build-push-action.
# Login to Docker Hub: Uses the docker/login-action to authenticate with Docker Hub using the secrets you added.
# Build and Push: Uses the docker/build-push-action to build the Docker image and push it to Docker Hub. Replace your-dockerhub-username/your-image-name with your actual Docker Hub repository name.
# Logout: Logs out from Docker Hub after the push is complete.
# Final Steps
# Test the Workflow: Push a change to your main branch to trigger the workflow and verify that the image is built and pushed to Docker Hub.
# Monitor: Check the Actions tab in your GitHub repository to monitor the workflow execution and troubleshoot any issues.
